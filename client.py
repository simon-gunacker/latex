#!/usr/bin/python3
# coding=utf-8

"""
client.py: uses Statstics class from latex.py and plots statistics.

When no args are passed, a shell is opened.
The shell can be used to either print statistics on client side or send those commands to the server.

When client.py is called with -s (--send respectively) <command>, the given <command> is sent to the server directly.
This way, the script can be used in shell files too
"""

__author__ = "Simon Gunacker"
__copyright__ = "Copyright 2018, Graz"

import os, cmd, socket
from latex import *
from colorama import Fore, Back, Style, init
import argparse

class StatsShell(cmd.Cmd):
    intro = 'This is latex stats. Type help or ? to list commands.\n'
    prompt = Fore.BLACK + Style.BRIGHT + '(shell) ' + Style.RESET_ALL + Fore.WHITE

    def __init__(self):
        super(StatsShell, self).__init__()
        # os.system("cls")

    def print(self, text):
        print("(sshell) {}".format(text))

    def do_toc(self, arg):
        'Prints table of content'
        Statistics().print_table_of_content()

    def do_lof(self, arg):
        'Prints list of figures'
        Statistics().print_list_of_figures()

    def do_lot(self, arg):
        'Prints list of figures'
        Statistics().print_list_of_tables()

    def do_unu(self, arg):
        'Prints list of unused [figs, refs]'
        args = arg.split()
        if len(args) == 0 or args[0] == 'refs':
            Statistics().print_unused_references()
        elif args[0] == 'figs':
            Statistics().print_unused_figures()

    def do_und(self, arg):
        'Prints list of figures'
        Statistics().print_undefined_references()

    def do_backup(self, arg):
        'Generates a backup of current statistics if backup was not yet generated for that day'
        Statistics().backup_first_start_of_day()

    def do_bibtexwarn(self, arg):
        'Prints all warning generated by bibtex when last compiled'
        Statistics().print_bibtex_warnings()

    def do_mainlogwarn(self, arg):
        'Prints all warning found during compilation (except for bibtex)'
        Statistics().print_mainlog_warnings()

    def do_warn(self, arg):
        'Prints all warnings found during compilation'
        Statistics().print_warnings()

    def do_send(self, arg):
        'sends command to server'
        clientsocket = socket.socket()
        clientsocket.connect( ('127.0.0.1', 1234) )
        clientsocket.send(arg.encode())
        clientsocket.close()

    def do_bye(self, arg):
        'Close shell and exit'
        self.print("Exit.")
        return True

if __name__ == "__main__":
    os.system("cls")
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--send", help="sends a command to server directly", type=str)
    args = parser.parse_args()

    stats = StatsShell()
    if args.send is not None:
        stats.do_send(args.send)
    else:
        stats.cmdloop()